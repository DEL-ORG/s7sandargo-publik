version: '3.3'

services: 

  db: devopseasylearning/tarzan-db:v0.0.1
    container_name: tarzan_db
    environment:
      MYSQL_ROOT_PASSWORD: my-secret-pw
    volumes:
      - db-data:/var/lib/mysql
    networks: 
      - tarzan-network
    restart: always


  redis: 
    container_name: tarzan-redis
    image: redis
    networks:
      - tarzan-network
    environment:
      REDIS_USER: redis
      REDIS_PASSWORD: redis
    volumes:
      - redis-data:/data
    restart: always


  weather: 
    image: devopseasylearning/tarzan-weather:v0.0.1
    container_name: tarzan_weather
    environment: 
      APIKEY: ecbc396f46mshb65cbb1f82cf334p1fcc87jsna5e962a3c542
    ports:
      - 5000
    networks:  
      - tarzan-network
    depends_on:
      - db   # Note that the "weather" service depends on both db and redis, as indicated by the architecture
      - redis
    restart: always
    

  auth: 
    image: devopseasylearning/tarzan-auth:v0.0.1
    container_name: tarzan_auth
  environment:
    DB_HOST: db
    DB_PASSWORD: my-secret-pw
    ports:
      - 8080
    # The use of port 8080 here is REDUNDANT, since port 8080 is actually already defined in the Imagefile or Dockerfile, this 8080 will kind of OVERRIDE 8080, just for study purpose though.
    networks:   
      - tarzan-network
    depends_on:
      - weather #In the information flow, the "auth" service depends on the "weather" service
     restart: always

  ui: 
  image: devopseasylearning/tarzan-ui:v0.0.1
  container_name: tarzan-ui
  ports:
   - 3000
  expose: 
    - 3030:3000
  networks:  
  - tarzan-network
  depends_on: 
    - auth  #This is exactly how the sequence of flow shows.
  environment:
    AUTH_host: auth
    AUTH_PORT: 8080
    WEATHER_HOST: weather
    WEATHER _PORT: 5000
    REDIS_USER: redis
    REDIS_PASSWORD: redis
  restart: always


networks:
  - tarzan-network


volumes:
  db-data:
  redis-data:
  



